{"ast":null,"code":"export function mapDataHelper(infoValue) {\n  const tempMapObj = {};\n  const tempMapArray = [];\n\n  if (infoValue && infoValue.length !== 0) {\n    infoValue.map(_ref => {\n      let {\n        place_id,\n        address_components,\n        formatted_address,\n        geometry: {\n          location\n        }\n      } = _ref;\n      let id = '';\n      let lat = '';\n      let lng = '';\n      let formattedAddress = '';\n      let city = '';\n      let state_long = '';\n      let state_short = '';\n      let zipcode = '';\n      let country_long = '';\n      let country_short = '';\n      id = place_id;\n      lat = location.lat();\n      lng = location.lng();\n      formattedAddress = formatted_address;\n\n      if (address_components) {\n        for (let i = 0; i < address_components.length; i++) {\n          if (address_components[i].types.length) {\n            switch (address_components[i].types[0]) {\n              case 'locality':\n                city = address_components[i].long_name;\n                break;\n\n              case 'administrative_area_level_1':\n                state_long = address_components[i].long_name;\n                state_short = address_components[i].short_name;\n                break;\n\n              case 'country':\n                country_long = address_components[i].long_name;\n                country_short = address_components[i].short_name;\n                break;\n\n              case 'postal_code':\n                zipcode = address_components[i].long_name;\n                break;\n\n              default:\n                break;\n            }\n          }\n        }\n      }\n\n      tempMapObj.id = id;\n      tempMapObj.lat = lat;\n      tempMapObj.lng = lng;\n      tempMapObj.formattedAddress = formattedAddress;\n      tempMapObj.city = city;\n      tempMapObj.state_short = state_short;\n      tempMapObj.state_long = state_long;\n      tempMapObj.zipcode = zipcode;\n      tempMapObj.country_short = country_short;\n      tempMapObj.country_long = country_long;\n      tempMapArray.push(tempMapObj);\n      return tempMapArray;\n    });\n  }\n\n  return tempMapArray;\n}","map":{"version":3,"sources":["C:/Users/Talha/Desktop/hotel/src/components/Map/mapDataHelper.js"],"names":["mapDataHelper","infoValue","tempMapObj","tempMapArray","length","map","place_id","address_components","formatted_address","geometry","location","id","lat","lng","formattedAddress","city","state_long","state_short","zipcode","country_long","country_short","i","types","long_name","short_name","push"],"mappings":"AAAA,OAAO,SAASA,aAAT,CAAuBC,SAAvB,EAAkC;AACvC,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,YAAY,GAAG,EAArB;;AAEA,MAAIF,SAAS,IAAIA,SAAS,CAACG,MAAV,KAAqB,CAAtC,EAAyC;AACvCH,IAAAA,SAAS,CAACI,GAAV,CACE,QAKM;AAAA,UALL;AACCC,QAAAA,QADD;AAECC,QAAAA,kBAFD;AAGCC,QAAAA,iBAHD;AAICC,QAAAA,QAAQ,EAAE;AAAEC,UAAAA;AAAF;AAJX,OAKK;AACJ,UAAIC,EAAE,GAAG,EAAT;AACA,UAAIC,GAAG,GAAG,EAAV;AACA,UAAIC,GAAG,GAAG,EAAV;AACA,UAAIC,gBAAgB,GAAG,EAAvB;AACA,UAAIC,IAAI,GAAG,EAAX;AACA,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAIC,WAAW,GAAG,EAAlB;AACA,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,YAAY,GAAG,EAAnB;AACA,UAAIC,aAAa,GAAG,EAApB;AAEAT,MAAAA,EAAE,GAAGL,QAAL;AACAM,MAAAA,GAAG,GAAGF,QAAQ,CAACE,GAAT,EAAN;AACAC,MAAAA,GAAG,GAAGH,QAAQ,CAACG,GAAT,EAAN;AACAC,MAAAA,gBAAgB,GAAGN,iBAAnB;;AACA,UAAID,kBAAJ,EAAwB;AACtB,aAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,kBAAkB,CAACH,MAAvC,EAA+CiB,CAAC,EAAhD,EAAoD;AAClD,cAAId,kBAAkB,CAACc,CAAD,CAAlB,CAAsBC,KAAtB,CAA4BlB,MAAhC,EAAwC;AACtC,oBAAQG,kBAAkB,CAACc,CAAD,CAAlB,CAAsBC,KAAtB,CAA4B,CAA5B,CAAR;AACE,mBAAK,UAAL;AACEP,gBAAAA,IAAI,GAAGR,kBAAkB,CAACc,CAAD,CAAlB,CAAsBE,SAA7B;AACA;;AACF,mBAAK,6BAAL;AACEP,gBAAAA,UAAU,GAAGT,kBAAkB,CAACc,CAAD,CAAlB,CAAsBE,SAAnC;AACAN,gBAAAA,WAAW,GAAGV,kBAAkB,CAACc,CAAD,CAAlB,CAAsBG,UAApC;AACA;;AACF,mBAAK,SAAL;AACEL,gBAAAA,YAAY,GAAGZ,kBAAkB,CAACc,CAAD,CAAlB,CAAsBE,SAArC;AACAH,gBAAAA,aAAa,GAAGb,kBAAkB,CAACc,CAAD,CAAlB,CAAsBG,UAAtC;AACA;;AACF,mBAAK,aAAL;AACEN,gBAAAA,OAAO,GAAGX,kBAAkB,CAACc,CAAD,CAAlB,CAAsBE,SAAhC;AACA;;AACF;AACE;AAhBJ;AAkBD;AACF;AACF;;AAEDrB,MAAAA,UAAU,CAACS,EAAX,GAAgBA,EAAhB;AACAT,MAAAA,UAAU,CAACU,GAAX,GAAiBA,GAAjB;AACAV,MAAAA,UAAU,CAACW,GAAX,GAAiBA,GAAjB;AACAX,MAAAA,UAAU,CAACY,gBAAX,GAA8BA,gBAA9B;AACAZ,MAAAA,UAAU,CAACa,IAAX,GAAkBA,IAAlB;AACAb,MAAAA,UAAU,CAACe,WAAX,GAAyBA,WAAzB;AACAf,MAAAA,UAAU,CAACc,UAAX,GAAwBA,UAAxB;AACAd,MAAAA,UAAU,CAACgB,OAAX,GAAqBA,OAArB;AACAhB,MAAAA,UAAU,CAACkB,aAAX,GAA2BA,aAA3B;AACAlB,MAAAA,UAAU,CAACiB,YAAX,GAA0BA,YAA1B;AACAhB,MAAAA,YAAY,CAACsB,IAAb,CAAkBvB,UAAlB;AACA,aAAOC,YAAP;AACD,KA3DH;AA6DD;;AAED,SAAOA,YAAP;AACD","sourcesContent":["export function mapDataHelper(infoValue) {\n  const tempMapObj = {};\n  const tempMapArray = [];\n\n  if (infoValue && infoValue.length !== 0) {\n    infoValue.map(\n      ({\n        place_id,\n        address_components,\n        formatted_address,\n        geometry: { location },\n      }) => {\n        let id = '';\n        let lat = '';\n        let lng = '';\n        let formattedAddress = '';\n        let city = '';\n        let state_long = '';\n        let state_short = '';\n        let zipcode = '';\n        let country_long = '';\n        let country_short = '';\n\n        id = place_id;\n        lat = location.lat();\n        lng = location.lng();\n        formattedAddress = formatted_address;\n        if (address_components) {\n          for (let i = 0; i < address_components.length; i++) {\n            if (address_components[i].types.length) {\n              switch (address_components[i].types[0]) {\n                case 'locality':\n                  city = address_components[i].long_name;\n                  break;\n                case 'administrative_area_level_1':\n                  state_long = address_components[i].long_name;\n                  state_short = address_components[i].short_name;\n                  break;\n                case 'country':\n                  country_long = address_components[i].long_name;\n                  country_short = address_components[i].short_name;\n                  break;\n                case 'postal_code':\n                  zipcode = address_components[i].long_name;\n                  break;\n                default:\n                  break;\n              }\n            }\n          }\n        }\n\n        tempMapObj.id = id;\n        tempMapObj.lat = lat;\n        tempMapObj.lng = lng;\n        tempMapObj.formattedAddress = formattedAddress;\n        tempMapObj.city = city;\n        tempMapObj.state_short = state_short;\n        tempMapObj.state_long = state_long;\n        tempMapObj.zipcode = zipcode;\n        tempMapObj.country_short = country_short;\n        tempMapObj.country_long = country_long;\n        tempMapArray.push(tempMapObj);\n        return tempMapArray;\n      }\n    );\n  }\n\n  return tempMapArray;\n}\n"]},"metadata":{},"sourceType":"module"}