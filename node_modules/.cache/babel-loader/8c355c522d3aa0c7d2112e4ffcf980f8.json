{"ast":null,"code":"import \"antd/es/input/style/css\";\nimport _Input from \"antd/es/input\";\nvar _jsxFileName = \"C:\\\\Users\\\\Talha\\\\Desktop\\\\hotel\\\\src\\\\components\\\\Map\\\\MapAutoComplete.js\";\nimport React, { useState } from 'react';\nimport { useLoadScript, StandaloneSearchBox } from '@react-google-maps/api';\n\nconst SearchInput = props => {\n  const [searchBox, setSearchBox] = useState();\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAP_API_KEY\n  });\n  const {\n    getInputValue\n  } = props;\n  const [locationInput, setLocationInput] = useState({\n    searchedLocation: '',\n    searchedPlaceAPIData: []\n  });\n\n  const handleOnChange = event => {\n    if (event.which === '13') {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n  };\n\n  const onLoad = ref => setSearchBox(ref);\n\n  const onPlacesChanged = () => {\n    const places = searchBox.getPlaces();\n    setLocationInput({\n      searchedLocation: places && places[0] && places[0].formatted_address,\n      searchedPlaceAPIData: places ? places : []\n    });\n    getInputValue({\n      searchedLocation: places && places[0] && places[0].formatted_address,\n      searchedPlaceAPIData: places ? places : []\n    });\n  };\n\n  const handleOnPressEnter = event => {\n    if (event.which === '13') {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n    getInputValue(locationInput);\n  };\n\n  if (loadError) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 10\n      }\n    }, \"Map cannot be loaded right now, sorry.\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map_autocomplete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }\n  }, isLoaded && /*#__PURE__*/React.createElement(StandaloneSearchBox, {\n    onLoad: onLoad,\n    onPlacesChanged: onPlacesChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    type: \"text\",\n    defaultValue: \"\",\n    value: locationInput.searchedLocation || '',\n    placeholder: \"Search \\u201CThailand, Asia\\u201D\",\n    size: \"large\",\n    onChange: handleOnChange,\n    onPressEnter: handleOnPressEnter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 6\n    }\n  })));\n};\n\nconst MapAutoComplete = props => {\n  const {\n    updateValue\n  } = props;\n  return /*#__PURE__*/React.createElement(SearchInput, {\n    getInputValue: updateValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default MapAutoComplete;","map":{"version":3,"sources":["C:/Users/Talha/Desktop/hotel/src/components/Map/MapAutoComplete.js"],"names":["React","useState","useLoadScript","StandaloneSearchBox","SearchInput","props","searchBox","setSearchBox","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAP_API_KEY","getInputValue","locationInput","setLocationInput","searchedLocation","searchedPlaceAPIData","handleOnChange","event","which","preventDefault","stopPropagation","target","value","onLoad","ref","onPlacesChanged","places","getPlaces","formatted_address","handleOnPressEnter","MapAutoComplete","updateValue"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAGA,SAASC,aAAT,EAAwBC,mBAAxB,QAAmD,wBAAnD;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,EAA1C;AACA,QAAM;AAAEO,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BP,aAAa,CAAC;AAC7CQ,IAAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADe,GAAD,CAA7C;AAGA,QAAM;AAAEC,IAAAA;AAAF,MAAoBT,KAA1B;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC;AAClDgB,IAAAA,gBAAgB,EAAE,EADgC;AAElDC,IAAAA,oBAAoB,EAAE;AAF4B,GAAD,CAAlD;;AAIA,QAAMC,cAAc,GAAIC,KAAD,IAAW;AACjC,QAAIA,KAAK,CAACC,KAAN,KAAgB,IAApB,EAA0B;AACzBD,MAAAA,KAAK,CAACE,cAAN;AACAF,MAAAA,KAAK,CAACG,eAAN;AACA;;AACDP,IAAAA,gBAAgB,CAAC;AAChBC,MAAAA,gBAAgB,EAAEG,KAAK,CAACI,MAAN,CAAaC;AADf,KAAD,CAAhB;AAGA,GARD;;AAUA,QAAMC,MAAM,GAAIC,GAAD,IAASpB,YAAY,CAACoB,GAAD,CAApC;;AAEA,QAAMC,eAAe,GAAG,MAAM;AAC7B,UAAMC,MAAM,GAAGvB,SAAS,CAACwB,SAAV,EAAf;AACAd,IAAAA,gBAAgB,CAAC;AAChBC,MAAAA,gBAAgB,EAAEY,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAhB,IAAuBA,MAAM,CAAC,CAAD,CAAN,CAAUE,iBADnC;AAEhBb,MAAAA,oBAAoB,EAAEW,MAAM,GAAGA,MAAH,GAAY;AAFxB,KAAD,CAAhB;AAIAf,IAAAA,aAAa,CAAC;AACbG,MAAAA,gBAAgB,EAAEY,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAhB,IAAuBA,MAAM,CAAC,CAAD,CAAN,CAAUE,iBADtC;AAEbb,MAAAA,oBAAoB,EAAEW,MAAM,GAAGA,MAAH,GAAY;AAF3B,KAAD,CAAb;AAIA,GAVD;;AAYA,QAAMG,kBAAkB,GAAIZ,KAAD,IAAW;AACrC,QAAIA,KAAK,CAACC,KAAN,KAAgB,IAApB,EAA0B;AACzBD,MAAAA,KAAK,CAACE,cAAN;AACAF,MAAAA,KAAK,CAACG,eAAN;AACA;;AACDP,IAAAA,gBAAgB,CAAC;AAAEC,MAAAA,gBAAgB,EAAEG,KAAK,CAACI,MAAN,CAAaC;AAAjC,KAAD,CAAhB;AACAX,IAAAA,aAAa,CAACC,aAAD,CAAb;AACA,GAPD;;AASA,MAAIN,SAAJ,EAAe;AACd,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAP;AACA;;AAED,sBACC;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACED,QAAQ,iBACR,oBAAC,mBAAD;AAAqB,IAAA,MAAM,EAAEkB,MAA7B;AAAqC,IAAA,eAAe,EAAEE,eAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AACC,IAAA,IAAI,EAAC,MADN;AAEC,IAAA,YAAY,EAAC,EAFd;AAGC,IAAA,KAAK,EAAEb,aAAa,CAACE,gBAAd,IAAkC,EAH1C;AAIC,IAAA,WAAW,EAAC,mCAJb;AAKC,IAAA,IAAI,EAAC,OALN;AAMC,IAAA,QAAQ,EAAEE,cANX;AAOC,IAAA,YAAY,EAAEa,kBAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAFF,CADD;AAiBA,CAhED;;AAkEA,MAAMC,eAAe,GAAI5B,KAAD,IAAW;AAClC,QAAM;AAAE6B,IAAAA;AAAF,MAAkB7B,KAAxB;AACA,sBAAO,oBAAC,WAAD;AAAa,IAAA,aAAa,EAAE6B,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CAHD;;AAKA,eAAeD,eAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Input } from 'antd';\n\nimport { useLoadScript, StandaloneSearchBox } from '@react-google-maps/api';\n\nconst SearchInput = (props) => {\n\tconst [searchBox, setSearchBox] = useState();\n\tconst { isLoaded, loadError } = useLoadScript({\n\t\tgoogleMapsApiKey: process.env.REACT_APP_GOOGLE_MAP_API_KEY,\n\t});\n\tconst { getInputValue } = props;\n\tconst [locationInput, setLocationInput] = useState({\n\t\tsearchedLocation: '',\n\t\tsearchedPlaceAPIData: [],\n\t});\n\tconst handleOnChange = (event) => {\n\t\tif (event.which === '13') {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t}\n\t\tsetLocationInput({\n\t\t\tsearchedLocation: event.target.value,\n\t\t});\n\t};\n\n\tconst onLoad = (ref) => setSearchBox(ref);\n\n\tconst onPlacesChanged = () => {\n\t\tconst places = searchBox.getPlaces();\n\t\tsetLocationInput({\n\t\t\tsearchedLocation: places && places[0] && places[0].formatted_address,\n\t\t\tsearchedPlaceAPIData: places ? places : [],\n\t\t});\n\t\tgetInputValue({\n\t\t\tsearchedLocation: places && places[0] && places[0].formatted_address,\n\t\t\tsearchedPlaceAPIData: places ? places : [],\n\t\t});\n\t};\n\n\tconst handleOnPressEnter = (event) => {\n\t\tif (event.which === '13') {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t}\n\t\tsetLocationInput({ searchedLocation: event.target.value });\n\t\tgetInputValue(locationInput);\n\t};\n\n\tif (loadError) {\n\t\treturn <div>Map cannot be loaded right now, sorry.</div>;\n\t}\n\n\treturn (\n\t\t<div className='map_autocomplete'>\n\t\t\t{isLoaded && (\n\t\t\t\t<StandaloneSearchBox onLoad={onLoad} onPlacesChanged={onPlacesChanged}>\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tdefaultValue=''\n\t\t\t\t\t\tvalue={locationInput.searchedLocation || ''}\n\t\t\t\t\t\tplaceholder='Search “Thailand, Asia”'\n\t\t\t\t\t\tsize='large'\n\t\t\t\t\t\tonChange={handleOnChange}\n\t\t\t\t\t\tonPressEnter={handleOnPressEnter}\n\t\t\t\t\t/>\n\t\t\t\t</StandaloneSearchBox>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nconst MapAutoComplete = (props) => {\n\tconst { updateValue } = props;\n\treturn <SearchInput getInputValue={updateValue} />;\n};\n\nexport default MapAutoComplete;\n"]},"metadata":{},"sourceType":"module"}