{"ast":null,"code":"import { useState, useReducer, useEffect } from 'react';\n\nasync function SuperFetch(url) {\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n  let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n  };\n  let body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let options = {\n    method,\n    headers\n  };\n  if (method === 'POST' || method === 'PUT') options = { ...options,\n    body\n  }; // authentication\n  // we will had custom headers here.\n\n  return fetch(url, options).then(res => {\n    return Promise.resolve(res.json());\n  }).catch(error => Promise.reject(error));\n}\n\nfunction dataFetchReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return { ...state,\n        loading: true,\n        error: false\n      };\n\n    case 'FETCH_SUCCESS':\n      return { ...state,\n        data: action.payload.slice(0, state.limit),\n        total: action.payload,\n        loading: false,\n        error: false\n      };\n\n    case 'FETCH_FAILURE':\n      return { ...state,\n        loading: false,\n        error: true\n      };\n\n    case 'LOAD_MORE':\n      return { ...state,\n        data: [...state.data, ...state.total.slice(state.data.length, state.data.length + state.limit)],\n        loading: false,\n        error: false\n      };\n\n    default:\n      throw new Error();\n  }\n}\n\nconst useDataApi = function (initialUrl) {\n  let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  let initialData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  const [url, setUrl] = useState(initialUrl);\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    loading: false,\n    error: false,\n    data: initialData,\n    total: initialData,\n    limit: limit\n  });\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({\n        type: 'FETCH_INIT'\n      });\n\n      try {\n        const result = await SuperFetch(url);\n\n        if (!didCancel) {\n          dispatch({\n            type: 'FETCH_SUCCESS',\n            payload: result\n          });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({\n            type: 'FETCH_FAILURE'\n          });\n        }\n      }\n    };\n\n    fetchData();\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  const loadMoreData = () => {\n    dispatch({\n      type: 'LOAD_MORE'\n    });\n  };\n\n  const doFetch = url => {\n    setUrl(url);\n  };\n\n  return { ...state,\n    doFetch,\n    loadMoreData\n  };\n};\n\nexport default useDataApi;","map":{"version":3,"sources":["C:/Users/Talha/Desktop/hotel/src/library/hooks/useDataApi.js"],"names":["useState","useReducer","useEffect","SuperFetch","url","method","headers","body","options","fetch","then","res","Promise","resolve","json","catch","error","reject","dataFetchReducer","state","action","type","loading","data","payload","slice","limit","total","length","Error","useDataApi","initialUrl","initialData","setUrl","dispatch","didCancel","fetchData","result","loadMoreData","doFetch"],"mappings":"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","sourcesContent":["import { useState, useReducer, useEffect } from 'react';\n\nasync function SuperFetch(\n  url,\n  method = 'GET',\n  headers = {\n    'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8',\n  },\n  body = {}\n) {\n  let options = {\n    method,\n    headers,\n  };\n  if (method === 'POST' || method === 'PUT') options = { ...options, body };\n\n  // authentication\n  // we will had custom headers here.\n\n  return fetch(url, options)\n    .then(res => {\n      return Promise.resolve(res.json());\n    })\n    .catch(error => Promise.reject(error));\n}\n\nfunction dataFetchReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return {\n        ...state,\n        loading: true,\n        error: false,\n      };\n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        data: action.payload.slice(0, state.limit),\n        total: action.payload,\n        loading: false,\n        error: false,\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        error: true,\n      };\n    case 'LOAD_MORE':\n      return {\n        ...state,\n        data: [\n          ...state.data,\n          ...state.total.slice(\n            state.data.length,\n            state.data.length + state.limit\n          ),\n        ],\n        loading: false,\n        error: false,\n      };\n    default:\n      throw new Error();\n  }\n}\n\nconst useDataApi = (initialUrl, limit = 10, initialData = []) => {\n  const [url, setUrl] = useState(initialUrl);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    loading: false,\n    error: false,\n    data: initialData,\n    total: initialData,\n    limit: limit,\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_INIT' });\n\n      try {\n        const result = await SuperFetch(url);\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_SUCCESS', payload: result });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_FAILURE' });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n  const loadMoreData = () => {\n    dispatch({ type: 'LOAD_MORE' });\n  };\n  const doFetch = url => {\n    setUrl(url);\n  };\n\n  return { ...state, doFetch, loadMoreData };\n};\n\nexport default useDataApi;\n"]},"metadata":{},"sourceType":"module"}