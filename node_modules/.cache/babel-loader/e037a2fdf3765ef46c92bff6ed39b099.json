{"ast":null,"code":"import \"antd/es/input/style/css\";\nimport _Input from \"antd/es/input\";\nvar _jsxFileName = \"C:\\\\Users\\\\Talha\\\\Desktop\\\\hotel\\\\src\\\\components\\\\Map\\\\MapSearchBox.js\";\nimport React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Marker, StandaloneSearchBox } from '@react-google-maps/api';\nimport MapWrapper from './MapWrapper';\nimport makerImage from './hotelMapMarker.png';\n\nconst MapWithSearchBox = props => {\n  const [searchBox, setSearchBox] = useState();\n  const [dragNDropData, setDragNDropData] = useState([]);\n  const {\n    updateValue,\n    name\n  } = props;\n  const [locationInput, setLocationInput] = useState({\n    searchedLocation: ''\n  });\n  const [locationDetails, setLocationDetails] = useState({\n    center: {\n      lat: 40.7128,\n      lng: -74.006\n    },\n    markers: [{\n      position: {\n        lat: 40.7128,\n        lng: -74.006\n      }\n    }],\n    places: []\n  });\n\n  const onLoad = ref => setSearchBox(ref);\n\n  const onPlacesChanged = () => {\n    const places = searchBox.getPlaces();\n    const bounds = new window.google.maps.LatLngBounds();\n    places.forEach(place => {\n      if (place.geometry.viewport) {\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    const nextMarkers = places.map(place => ({\n      position: place.geometry.location\n    }));\n\n    const nextCenter = _.get(nextMarkers, '0.position', locationDetails.center);\n\n    setLocationDetails({\n      places,\n      center: nextCenter,\n      markers: nextMarkers\n    });\n    setLocationInput({\n      searchedLocation: places && places[0] && places[0].formatted_address\n    });\n    updateValue(places);\n  };\n\n  const handleOnChange = event => {\n    event.stopPropagation();\n\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n  };\n\n  const handleOnPressEnter = event => {\n    event.stopPropagation();\n\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n  };\n\n  const onDragEndFunc = marker => {\n    let tempLocArray = [];\n    var geocoder = new window.google.maps.Geocoder();\n    const latlng = {\n      lat: Number(marker.latLng.lat().toFixed(4)),\n      lng: Number(marker.latLng.lng().toFixed(4))\n    };\n    setLocationDetails({ ...locationDetails,\n      center: latlng\n    });\n    geocoder.geocode({\n      latLng: latlng\n    }, function (results, status) {\n      console.log(results, 'results');\n\n      if (results[0] && results[0].formatted_address) {\n        setLocationInput({\n          searchedLocation: results[0] && results[0].formatted_address\n        });\n        const location = {\n          place_id: results[0].place_id,\n          formatted_address: results[0].formatted_address,\n          address_components: results[0].address_components,\n          geometry: results[0].geometry\n        };\n        tempLocArray.push(location);\n      }\n\n      setDragNDropData(tempLocArray);\n    });\n    updateValue(dragNDropData);\n  };\n\n  return /*#__PURE__*/React.createElement(MapWrapper, {\n    id: \"map-search-box\",\n    mapContainerStyle: {\n      height: '400px',\n      width: '100%'\n    },\n    zoom: 15,\n    center: locationDetails.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(StandaloneSearchBox, {\n    onLoad: onLoad,\n    controlPosition: window.google.maps.ControlPosition.TOP_LEFT,\n    onPlacesChanged: onPlacesChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(_Input, {\n    type: \"text\",\n    name: name,\n    placeholder: \"Enter your hotel location\",\n    style: {\n      boxSizing: \"border-box\",\n      border: \"1px solid transparent\",\n      width: \"260px\",\n      height: \"40px\",\n      marginTop: \"10px\",\n      marginLeft: \"10px\",\n      padding: \"0 12px\",\n      borderRadius: \"2px\",\n      boxShadow: \"0 3px 6px rgba(0, 0, 0, 0.16)\",\n      fontSize: \"15px\",\n      outline: \"none\",\n      textOverflow: \"ellipses\"\n    },\n    defaultValue: \"\",\n    value: locationInput ? locationInput.searchedLocation : '',\n    onChange: handleOnChange,\n    onPressEnter: handleOnPressEnter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  })), locationDetails.markers.map((marker, index) => {\n    return /*#__PURE__*/React.createElement(Marker, {\n      icon: makerImage,\n      key: index,\n      position: marker.position,\n      onDragEnd: marker => onDragEndFunc(marker),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    });\n  }));\n};\n\nexport default MapWithSearchBox;","map":{"version":3,"sources":["C:/Users/Talha/Desktop/hotel/src/components/Map/MapSearchBox.js"],"names":["React","useState","_","Marker","StandaloneSearchBox","MapWrapper","makerImage","MapWithSearchBox","props","searchBox","setSearchBox","dragNDropData","setDragNDropData","updateValue","name","locationInput","setLocationInput","searchedLocation","locationDetails","setLocationDetails","center","lat","lng","markers","position","places","onLoad","ref","onPlacesChanged","getPlaces","bounds","window","google","maps","LatLngBounds","forEach","place","geometry","viewport","union","extend","location","nextMarkers","map","nextCenter","get","formatted_address","handleOnChange","event","stopPropagation","which","preventDefault","target","value","handleOnPressEnter","onDragEndFunc","marker","tempLocArray","geocoder","Geocoder","latlng","Number","latLng","toFixed","geocode","results","status","console","log","place_id","address_components","push","height","width","ControlPosition","TOP_LEFT","boxSizing","border","marginTop","marginLeft","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Marker, StandaloneSearchBox } from '@react-google-maps/api';\nimport MapWrapper from './MapWrapper';\nimport { Input } from 'antd';\nimport makerImage from './hotelMapMarker.png';\n\nconst MapWithSearchBox = (props) => {\n  const [searchBox, setSearchBox] = useState();\n  const [dragNDropData, setDragNDropData] = useState([]);\n  const { updateValue, name } = props;\n  const [locationInput, setLocationInput] = useState({ searchedLocation: '' });\n  const [locationDetails, setLocationDetails] = useState({\n    center: {\n      lat: 40.7128,\n      lng: -74.006,\n    },\n    markers: [\n      {\n        position: {\n          lat: 40.7128,\n          lng: -74.006,\n        },\n      },\n    ],\n    places: [],\n  });\n\n  const onLoad = (ref) => setSearchBox(ref);\n  const onPlacesChanged = () => {\n    const places = searchBox.getPlaces();\n    const bounds = new window.google.maps.LatLngBounds();\n    places.forEach((place) => {\n      if (place.geometry.viewport) {\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    const nextMarkers = places.map((place) => ({\n      position: place.geometry.location,\n    }));\n    const nextCenter = _.get(nextMarkers, '0.position', locationDetails.center);\n\n    setLocationDetails({\n      places,\n      center: nextCenter,\n      markers: nextMarkers,\n    });\n    setLocationInput({\n      searchedLocation: places && places[0] && places[0].formatted_address,\n    });\n    updateValue(places);\n  };\n\n  const handleOnChange = (event) => {\n    event.stopPropagation();\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n    setLocationInput({ searchedLocation: event.target.value });\n  };\n\n  const handleOnPressEnter = (event) => {\n    event.stopPropagation();\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n    setLocationInput({ searchedLocation: event.target.value });\n  };\n\n  const onDragEndFunc = (marker) => {\n    let tempLocArray = [];\n    var geocoder = new window.google.maps.Geocoder();\n    const latlng = {\n      lat: Number(marker.latLng.lat().toFixed(4)),\n      lng: Number(marker.latLng.lng().toFixed(4)),\n    };\n\n    setLocationDetails({\n      ...locationDetails,\n      center: latlng,\n    });\n\n    geocoder.geocode({ latLng: latlng }, function (results, status) {\n      console.log(results, 'results');\n      if (results[0] && results[0].formatted_address) {\n        setLocationInput({\n          searchedLocation: results[0] && results[0].formatted_address,\n        });\n        const location = {\n          place_id: results[0].place_id,\n          formatted_address: results[0].formatted_address,\n          address_components: results[0].address_components,\n          geometry: results[0].geometry,\n        };\n        tempLocArray.push(location);\n      }\n      setDragNDropData(tempLocArray);\n    });\n    updateValue(dragNDropData);\n  };\n\n  return (\n    <MapWrapper\n      id=\"map-search-box\"\n      mapContainerStyle={{\n        height: '400px',\n        width: '100%',\n      }}\n      zoom={15}\n      center={locationDetails.center}\n    >\n      <StandaloneSearchBox\n        onLoad={onLoad}\n        controlPosition={window.google.maps.ControlPosition.TOP_LEFT}\n        onPlacesChanged={onPlacesChanged}\n      >\n        <Input\n          type=\"text\"\n          name={name}\n          placeholder=\"Enter your hotel location\"\n          style={{\n            boxSizing: `border-box`,\n            border: `1px solid transparent`,\n            width: `260px`,\n            height: `40px`,\n            marginTop: `10px`,\n            marginLeft: `10px`,\n            padding: `0 12px`,\n            borderRadius: `2px`,\n            boxShadow: `0 3px 6px rgba(0, 0, 0, 0.16)`,\n            fontSize: `15px`,\n            outline: `none`,\n            textOverflow: `ellipses`,\n          }}\n          defaultValue=\"\"\n          value={locationInput ? locationInput.searchedLocation : ''}\n          onChange={handleOnChange}\n          onPressEnter={handleOnPressEnter}\n        />\n      </StandaloneSearchBox>\n      {locationDetails.markers.map((marker, index) => {\n        return (\n          <Marker\n            icon={makerImage}\n            key={index}\n            position={marker.position}\n            onDragEnd={(marker) => onDragEndFunc(marker)}\n          />\n        );\n      })}\n    </MapWrapper>\n  );\n};\n\nexport default MapWithSearchBox;\n"]},"metadata":{},"sourceType":"module"}